{"0": {
    "doc": "Cloud Instance Guide",
    "title": "Detailed Cloud Instance Instructions",
    "content": "The following instructions detail how to set up a Taraxa lite node RPC node on a Hetzner cloud instance (referral link). Please note that specifications may change over time. | Create a new cloud instance with the following minimum settings: . | Location: Any (some are cheaper; not all types are available everywhere) | Image: Ubuntu 24.04 or newer | Type: Dedicated vCPU (CCX23 or higher) | SSH Key: Add your SSH key if available | Default settings are acceptable for other options | . After creation, wait a few minutes. You will receive an email containing the IP address and SSH login details from Hetzner. Alternatively us any other cloud provider that offers a Linux instance with Docker support. | Login to your instance: . ssh root@&lt;IP_ADDRESS&gt; . Replace &lt;IP_ADDRESS&gt; with your instance’s actual IP. | Update the system: . sudo apt update &amp;&amp; sudo apt upgrade . | Install Docker following the Docker Engine Ubuntu repository installation guide: . sudo apt update sudo apt install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release &amp;&amp; echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null sudo apt-get update . sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin . | Verify Docker installation: . sudo docker run hello-world . | Install the Taraxa lite node: . mkdir ~/mainnet cd ~/mainnet wget https://raw.githubusercontent.com/Taraxa-project/taraxa-ops/master/taraxa_compose_mainnet/docker-compose.light.yml -O docker-compose.yml . docker compose up -d . docker compose logs -f -n 100 node . Press CTRL+C to exit the logs. | Validate the RPC endpoint: . curl -X POST http://localhost:7777 --data '{\"jsonrpc\":\"2.0\",\"method\":\"taraxa_getVersion\",\"params\":[],\"id\":1}' . | Install the latest database snapshot to speed up synchronization. Note that some commands may take a while to complete: . docker compose down docker run --rm -it -v mainnet_data:/data alpine sh cd /data/db rm -r db state_db wget http://snapshots.cryptobauer.com/snapshot-litenode-latest.tar.gz tar xzf snapshot-litenode-latest.tar.gz rm snapshot-litenode-latest.tar.gz exit . | Start the node and monitor synchronization: . docker compose up -d docker compose logs -f -n 100 node . Wait for the STATUS: GOOD. NODE SYNCED message. (Press CTRL+C to exit.) . | Revalidate the RPC endpoint: . curl -X POST http://localhost:7777 --data '{\"jsonrpc\":\"2.0\",\"method\":\"taraxa_getVersion\",\"params\":[],\"id\":1}' . | Optional: Test the RPC endpoint using the provided Javascript program. This test should ideally be performed from your local laptop or desktop, not the cloud instance, to ensure the RPC endpoint is accessible externally. It requires Node.js to be installed on you local laptop or desktop. Replace &lt;IP_ADDRESS&gt; with your cloud instance’s public IP address (see step 1.): . import { ethers } from 'ethers'; async function printTaraxaVersion() { const rpcUrl = 'http://&lt;IP_ADDRESS&gt;:7777'; const provider = new ethers.JsonRpcProvider(rpcUrl); try { const version = await provider.send('taraxa_getVersion', []); console.log('Response from Taraxa RPC node:', version); } catch (error) { console.error('Error interacting with Taraxa RPC node:', error); } } printTaraxaVersion(); . Then run on your local laptop or desktop: . npm install ethers node taraxa-rpc-test.js . | . Congratulations! Your Taraxa RPC node is now installed and ready to interact with the network and your applications. ",
    "url": "/rpc/guide-cloud-instance/#detailed-cloud-instance-instructions",
    
    "relUrl": "/rpc/guide-cloud-instance/#detailed-cloud-instance-instructions"
  },"1": {
    "doc": "Cloud Instance Guide",
    "title": "Cloud Instance Guide",
    "content": " ",
    "url": "/rpc/guide-cloud-instance/",
    
    "relUrl": "/rpc/guide-cloud-instance/"
  },"2": {
    "doc": "Generic Install Guide",
    "title": "Detailed Generic Instructions",
    "content": "The following instructions detail how to set up a Taraxa lite node RPC. The instructions cover common operating systems that support Docker. For specific instructions and examples for Windows Desktop or a Ubuntu Cloud Instance, refer to the respective guides: Windows Desktop and Cloud Instance. ",
    "url": "/rpc/guide-generic/#detailed-generic-instructions",
    
    "relUrl": "/rpc/guide-generic/#detailed-generic-instructions"
  },"3": {
    "doc": "Generic Install Guide",
    "title": "Install Docker",
    "content": "The first step is installing Docker, if it isn’t already installed. Follow the Docker Desktop for Desktop installations or the Docker Engine for server installations. Docker Desktop . For systems with a graphical interface (e.g., home desktops), follow the Docker Desktop installation guide. WSL (Windows Subsystem for Linux) . During Docker Desktop installation on Windows, you may be prompted to install WSL. It is recommended to do so. Alternatively, install it manually by running wsl --install in an Administrator PowerShell session. WSL is required to be installed. Docker Engine . For servers without a GUI or users preferring command-line tools, follow the Docker Engine installation guide. ",
    "url": "/rpc/guide-generic/#install-docker",
    
    "relUrl": "/rpc/guide-generic/#install-docker"
  },"4": {
    "doc": "Generic Install Guide",
    "title": "Install Taraxa Node",
    "content": "The following steps set up the Taraxa node using the command shell: . | Open a command shell: . | Windows: PowerShell or WSL | Linux/macOS: Terminal | . | Create a new folder mainnet: . | Windows: mkdir C:/mainnet (PowerShell) or mkdir /mnt/c/mainnet (WSL) | Linux/macOS: mkdir ~/mainnet | . | Navigate to the mainnet folder: . | Windows: cd C:/mainnet (PowerShell) or cd /mnt/c/mainnet (WSL) | Linux/macOS: cd ~/mainnet | . | Download the Taraxa lite node Docker Compose file: . wget https://raw.githubusercontent.com/Taraxa-project/taraxa-ops/master/taraxa_compose_mainnet/docker-compose.light.yml -O docker-compose.yml . or for a full node: . wget https://raw.githubusercontent.com/Taraxa-project/taraxa-ops/master/taraxa_compose_mainnet/docker-compose.yml -O docker-compose.yml . | Start the Taraxa node: . docker compose up -d . | Optional: Validate that the node is running: . docker compose logs -f -n 100 node . (Press CTRL+C to exit.) . | Optional: Validate the RPC endpoint: . | Windows (PowerShell): . curl -Uri http://localhost:7777 -Method Post -Headers @{ \"Content-Type\" = \"application/json\" } -Body '{\"jsonrpc\":\"2.0\",\"method\":\"taraxa_getVersion\",\"params\":[],\"id\":1}' . | Linux/macOS or WSL: . curl -X POST http://localhost:7777 --data '{\"jsonrpc\":\"2.0\",\"method\":\"taraxa_getVersion\",\"params\":[],\"id\":1}' . | . | . If the command returns a JSON string with a version field (e.g., 1.13.1), your node is successfully running. Next, install the latest database snapshot to speed up synchronization. ",
    "url": "/rpc/guide-generic/#install-taraxa-node",
    
    "relUrl": "/rpc/guide-generic/#install-taraxa-node"
  },"5": {
    "doc": "Generic Install Guide",
    "title": "Install Database Snapshot (Recommended)",
    "content": "Installing a snapshot significantly accelerates the initial sync. | Stop the running node: . docker compose down . | Mount the data volume: . docker run --rm -it -v mainnet_data:/data alpine sh . | Navigate to the database directory: . cd /data/db . | Remove the existing database: . rm -r db state_db . | Download the latest lite node snapshot if previously selected: . wget http://snapshots.cryptobauer.com/snapshot-litenode-latest.tar.gz . or full node snapshot: . wget https://storage.googleapis.com/taraxa-snapshot/snapshot.tar.gz . | Extract the snapshot: . tar xzf snapshot-litenode-latest.tar.gz . | Delete the downloaded archive: . rm snapshot-litenode-latest.tar.gz . | Exit the container: . exit . | Start the node: . docker compose up -d . | Monitor synchronization: . docker compose logs -f -n 100 node . Wait for the log message STATUS: GOOD. NODE SYNCED, indicating the node is fully synced and ready. (Press CTRL+C to exit.) . | Revalidate the RPC endpoint: . | Windows (PowerShell): . curl -Uri http://localhost:7777 -Method Post -Headers @{ \"Content-Type\" = \"application/json\" } -Body '{\"jsonrpc\":\"2.0\",\"method\":\"taraxa_getVersion\",\"params\":[],\"id\":1}' . | Linux/macOS or WSL: . curl -X POST http://localhost:7777 --data '{\"jsonrpc\":\"2.0\",\"method\":\"taraxa_getVersion\",\"params\":[],\"id\":1}' . | . | . ",
    "url": "/rpc/guide-generic/#install-database-snapshot-recommended",
    
    "relUrl": "/rpc/guide-generic/#install-database-snapshot-recommended"
  },"6": {
    "doc": "Generic Install Guide",
    "title": "Test Program",
    "content": "The following simple Javascript program can verify the RPC endpoint programmatically. Node.js must be installed. If the script is executed on a different machine than the node, ensure the RPC endpoint URL is changed to the node’s public IP address instead of localhost. import { ethers } from 'ethers'; async function printTaraxaVersion() { const rpcUrl = 'http://localhost:7777'; const provider = new ethers.JsonRpcProvider(rpcUrl); try { const version = await provider.send('taraxa_getVersion', []); console.log('Response from Taraxa RPC node:', version); } catch (error) { console.error('Error interacting with Taraxa RPC node:', error); } } printTaraxaVersion(); . To run: . | Save the code in a file named taraxa-rpc-test.js. | Install dependencies and run the script: | . npm install ethers node taraxa-rpc-test.js . Successful output will look like: . Response from Taraxa RPC node: { git_branch: '', git_commit_date: 'Tue, 8 Apr 2025 17:33:09 +0200', git_commit_hash: 'cdba692488ed9feab87637cb5f2520f01322c3f8', git_description: 'v1.12.15-31-gcdba69248', version: '1.13.1' } . ",
    "url": "/rpc/guide-generic/#test-program",
    
    "relUrl": "/rpc/guide-generic/#test-program"
  },"7": {
    "doc": "Generic Install Guide",
    "title": "Generic Install Guide",
    "content": " ",
    "url": "/rpc/guide-generic/",
    
    "relUrl": "/rpc/guide-generic/"
  },"8": {
    "doc": "Windows Desktop Guide",
    "title": "Detailed Windows Desktop Instructions",
    "content": "The following instructions detail how to set up a Taraxa lite node RPC node on a Windows desktop. | Install Docker Desktop by following the installation guide. Download the Docker version for Windows. Download either x86_64 or Arm version depending on your system. Most systems are x86_64. Install Docker Desktop by double-clicking the downloaded file. Make sure to check the box to enable WSL2 integration. If requested after the installation restart your computer. Accept the license agreement. Use the recommended settings (except you know better). Skip the registration step (except you want to register). Wait until Docker Desktop is started. Verify that it says Docker Engine running in the bottom left corner. | Open a PowerShell window. | Install the Taraxa lite node: . mkdir C:/mainnet cd C:/mainnet wget https://raw.githubusercontent.com/Taraxa-project/taraxa-ops/master/taraxa_compose_mainnet/docker-compose.light.yml -O docker-compose.yml . docker compose up -d . Allow access if a security prompt appears. docker compose logs -f -n 100 node . Press CTRL+C to exit the logs. | Validate the RPC endpoint: . curl -X POST http://localhost:7777 --data '{\"jsonrpc\":\"2.0\",\"method\":\"taraxa_getVersion\",\"params\":[],\"id\":1}' . | Install the latest database snapshot to speed up synchronization. Note that some commands may take a while to complete: . docker compose down docker run --rm -it -v mainnet_data:/data alpine sh cd /data/db rm -r db state_db wget http://snapshots.cryptobauer.com/snapshot-litenode-latest.tar.gz tar xzf snapshot-litenode-latest.tar.gz rm snapshot-litenode-latest.tar.gz exit . | Start the node and monitor synchronization: . docker compose up -d docker compose logs -f -n 100 node . Wait for the STATUS: GOOD. NODE SYNCED message. (Press CTRL+C to exit.) . | Revalidate the RPC endpoint: . curl -X POST http://localhost:7777 --data '{\"jsonrpc\":\"2.0\",\"method\":\"taraxa_getVersion\",\"params\":[],\"id\":1}' . | Optional: Test the RPC endpoint programmatically using the provided Javascript program. It requires Node.js to be installed. import { ethers } from 'ethers'; async function printTaraxaVersion() { const rpcUrl = 'http://localhost7777'; const provider = new ethers.JsonRpcProvider(rpcUrl); try { const version = await provider.send('taraxa_getVersion', []); console.log('Response from Taraxa RPC node:', version); } catch (error) { console.error('Error interacting with Taraxa RPC node:', error); } } printTaraxaVersion(); . Then run on your local laptop or desktop: . npm install ethers node taraxa-rpc-test.js . | . Congratulations! Your Taraxa RPC node is now installed and ready to interact with the network and your applications. ",
    "url": "/rpc/guide-windows-desktop/#detailed-windows-desktop-instructions",
    
    "relUrl": "/rpc/guide-windows-desktop/#detailed-windows-desktop-instructions"
  },"9": {
    "doc": "Windows Desktop Guide",
    "title": "Windows Desktop Guide",
    "content": " ",
    "url": "/rpc/guide-windows-desktop/",
    
    "relUrl": "/rpc/guide-windows-desktop/"
  },"10": {
    "doc": "RPC Node",
    "title": "Taraxa RPC Node Setup Guide",
    "content": "A Taraxa RPC node is a validator node configured not to participate in consensus (unless desired). Its main purpose is to provide a JSON-RPC interface to the Taraxa network, enabling developers to interact with the blockchain and build applications. A generic install guide is provided and also a step-by-step install guide for Windows Desktop and a Ubuntu Cloud Instance. ",
    "url": "/rpc/index/#taraxa-rpc-node-setup-guide",
    
    "relUrl": "/rpc/index/#taraxa-rpc-node-setup-guide"
  },"11": {
    "doc": "RPC Node",
    "title": "Node Type Selection",
    "content": "Taraxa offers two types of nodes: full nodes and lite nodes. Lite nodes are ideal for RPC purposes due to their lightweight nature and reduced disk space requirements. However, they only retain one day of historical data, which may not suffice for applications needing access to older blockchain history. For such use cases, a full node is recommended as it maintains the complete blockchain history. If in doubt begin with a lite node and switch to a full node later if your application performance is insufficient. ",
    "url": "/rpc/index/#node-type-selection",
    
    "relUrl": "/rpc/index/#node-type-selection"
  },"12": {
    "doc": "RPC Node",
    "title": "Hardware Selection",
    "content": "Lite nodes are resource-friendly and can run in various environments. Taraxa recommends using Docker images for installation. Any environment capable of running Docker should suffice, provided it meets the minimum hardware requirements. Common hosting environments include: . Desktop Computer . Some validators run nodes from home desktop machines. While hardware is usually sufficient, ensure you have adequate network bandwidth. Running a node from home is ideal for initial testing and experimentation. Cloud Instance . The most common long-term solution is renting a lightweight and cheap cloud instance from a provider with semi-dedicated resources. Virtual Private Server (VPS) . Similar to a cloud instance, a VPS is a virtual machine hosted on a physical server that is shared with others. It offers dedicated virtual resources and is often more cost-effective than dedicated servers. Dedicated Server (Bare Metal) . Dedicated servers are physical machines hosted in data centers. They offer dedicated resources, making them more predictable in terms of resources. However, they are typically more expensive and difficult to maintain. ",
    "url": "/rpc/index/#hardware-selection",
    
    "relUrl": "/rpc/index/#hardware-selection"
  },"13": {
    "doc": "RPC Node",
    "title": "Operating System Selection",
    "content": "Any operating system that supports Docker can run a Taraxa node. Practically, this is usually limited to Windows, Linux, and macOS. Linux and Windows receive the most community support. When ordering a cloud instance or server, providers usually offer pre-installed operating systems. Linux distributions (especially Ubuntu) are most common and often free of licensing fees, whereas Windows may incur extra costs. If unsure, choose Ubuntu Linux due to its ease of use, widespread community support, and compatibility with available tools. ",
    "url": "/rpc/index/#operating-system-selection",
    
    "relUrl": "/rpc/index/#operating-system-selection"
  },"14": {
    "doc": "RPC Node",
    "title": "RPC Node",
    "content": " ",
    "url": "/rpc/index/",
    
    "relUrl": "/rpc/index/"
  }
}
